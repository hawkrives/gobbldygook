/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */ 'use strict'
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread'
function peg$subclass(child, parent) {
	function ctor() {
		this.constructor = child
	}
	ctor.prototype = parent.prototype
	child.prototype = new ctor()
}
function peg$SyntaxError(message, expected, found, location) {
	this.message = message
	this.expected = expected
	this.found = found
	this.location = location
	this.name = 'SyntaxError'
	if (typeof Error.captureStackTrace === 'function') {
		Error.captureStackTrace(this, peg$SyntaxError)
	}
}
peg$subclass(peg$SyntaxError, Error)
peg$SyntaxError.buildMessage = function(expected, found) {
	var DESCRIBE_EXPECTATION_FNS = {
		literal: function literal(expectation) {
			return '"' + literalEscape(expectation.text) + '"'
		},
		class: function _class(expectation) {
			var escapedParts = '',
				i
			for (i = 0; i < expectation.parts.length; i++) {
				escapedParts +=
					expectation.parts[i] instanceof Array
						? classEscape(expectation.parts[i][0]) +
						  '-' +
						  classEscape(expectation.parts[i][1])
						: classEscape(expectation.parts[i])
			}
			return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
		},
		any: function any(expectation) {
			return 'any character'
		},
		end: function end(expectation) {
			return 'end of input'
		},
		other: function other(expectation) {
			return expectation.description
		},
	}
	function hex(ch) {
		return ch
			.charCodeAt(0)
			.toString(16)
			.toUpperCase()
	}
	function literalEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/"/g, '\\"')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch)
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch)
			})
	}
	function classEscape(s) {
		return s
			.replace(/\\/g, '\\\\')
			.replace(/\]/g, '\\]')
			.replace(/\^/g, '\\^')
			.replace(/-/g, '\\-')
			.replace(/\0/g, '\\0')
			.replace(/\t/g, '\\t')
			.replace(/\n/g, '\\n')
			.replace(/\r/g, '\\r')
			.replace(/[\x00-\x0F]/g, function(ch) {
				return '\\x0' + hex(ch)
			})
			.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
				return '\\x' + hex(ch)
			})
	}
	function describeExpectation(expectation) {
		return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
	}
	function describeExpected(expected) {
		var descriptions = new Array(expected.length),
			i,
			j
		for (i = 0; i < expected.length; i++) {
			descriptions[i] = describeExpectation(expected[i])
		}
		descriptions.sort()
		if (descriptions.length > 0) {
			for (i = 1, j = 1; i < descriptions.length; i++) {
				if (descriptions[i - 1] !== descriptions[i]) {
					descriptions[j] = descriptions[i]
					j++
				}
			}
			descriptions.length = j
		}
		switch (descriptions.length) {
			case 1:
				return descriptions[0]
			case 2:
				return descriptions[0] + ' or ' + descriptions[1]
			default:
				return (
					descriptions.slice(0, -1).join(', ') +
					', or ' +
					descriptions[descriptions.length - 1]
				)
		}
	}
	function describeFound(found) {
		return found ? '"' + literalEscape(found) + '"' : 'end of input'
	}
	return (
		'Expected ' +
		describeExpected(expected) +
		' but ' +
		describeFound(found) +
		' found.'
	)
}
function peg$parse(input, options) {
	options = options !== void 0 ? options : {}
	var peg$FAILED = {},
		peg$startRuleFunctions = {
			Result: peg$parseResult,
			Filter: peg$parseFilter,
		},
		peg$startRuleFunction = peg$parseResult,
		peg$c0 = peg$otherExpectation('expression'),
		peg$c1 = function peg$c1(expr) {
			return expr
		},
		peg$c2 = 's',
		peg$c3 = peg$literalExpectation('s', false),
		peg$c4 = 'course',
		peg$c5 = peg$literalExpectation('course', false),
		peg$c6 = 'where',
		peg$c7 = peg$literalExpectation('where', false),
		peg$c8 = function peg$c8(count, distinct, where) {
			return {
				type: 'where',
				count: count,
				qualification: where,
				distinct: distinct,
			}
		},
		peg$c9 = 'only',
		peg$c10 = peg$literalExpectation('only', false),
		peg$c11 = 'courses',
		peg$c12 = peg$literalExpectation('courses', false),
		peg$c13 = function peg$c13(distinct, where) {
			return {where: where, type: 'FilterWhere'}
		},
		peg$c14 = 'from',
		peg$c15 = peg$literalExpectation('from', false),
		peg$c16 = function peg$c16(distinct, ofList) {
			return {of: ofList, type: 'FilterOf'}
		},
		peg$c17 = function peg$c17(distinct, filter) {
			return _objectSpread({type: 'filter'}, filter, {distinct: distinct})
		},
		peg$c18 = 'occurrence',
		peg$c19 = peg$literalExpectation('occurrence', false),
		peg$c20 = 'of',
		peg$c21 = peg$literalExpectation('of', false),
		peg$c22 = function peg$c22(count, course) {
			return {type: 'occurrence', count: count, course: course}
		},
		peg$c23 = '{',
		peg$c24 = peg$literalExpectation('{', false),
		peg$c25 = '}',
		peg$c26 = peg$literalExpectation('}', false),
		peg$c27 = function peg$c27(q) {
			return q
		},
		peg$c28 = peg$otherExpectation('qualification-or'),
		peg$c29 = '|',
		peg$c30 = peg$literalExpectation('|', false),
		peg$c31 = function peg$c31(lhs, rhs) {
			return {type: 'BooleanOr', values: [lhs, ...(rhs.values || [rhs])]}
		},
		peg$c32 = peg$otherExpectation('qualification-and'),
		peg$c33 = '&',
		peg$c34 = peg$literalExpectation('&', false),
		peg$c35 = function peg$c35(lhs, rhs) {
			return {type: 'BooleanAnd', values: [lhs, ...(rhs.values || [rhs])]}
		},
		peg$c36 = function peg$c36(key, op, f, q) {
			return _objectSpread({}, f, {qualification: q})
		},
		peg$c37 = function peg$c37(key, op, value) {
			return {type: 'Qualification', key: key, operator: op, value: value}
		},
		peg$c38 = function peg$c38(value) {
			return value
		},
		peg$c39 = function peg$c39(num) {
			return {type: 'Number', value: num}
		},
		peg$c40 = /^[a-z0-9_\-]/i,
		peg$c41 = peg$classExpectation(
			[['a', 'z'], ['0', '9'], '_', '-'],
			false,
			true,
		),
		peg$c42 = function peg$c42(word) {
			return {type: 'String', value: word.join('')}
		},
		peg$c43 = 'gereqs',
		peg$c44 = peg$literalExpectation('gereqs', false),
		peg$c45 = 'year',
		peg$c46 = peg$literalExpectation('year', false),
		peg$c47 = 'department',
		peg$c48 = peg$literalExpectation('department', false),
		peg$c49 = 'level',
		peg$c50 = peg$literalExpectation('level', false),
		peg$c51 = 'max',
		peg$c52 = peg$literalExpectation('max', false),
		peg$c53 = 'min',
		peg$c54 = peg$literalExpectation('min', false),
		peg$c55 = function peg$c55(name, prop) {
			return {name: name, prop: prop, type: 'function'}
		},
		peg$c56 = '<=',
		peg$c57 = peg$literalExpectation('<=', false),
		peg$c58 = function peg$c58() {
			return 'Lte'
		},
		peg$c59 = '<',
		peg$c60 = peg$literalExpectation('<', false),
		peg$c61 = function peg$c61() {
			return 'Lt'
		},
		peg$c62 = '==',
		peg$c63 = peg$literalExpectation('==', false),
		peg$c64 = '=',
		peg$c65 = peg$literalExpectation('=', false),
		peg$c66 = function peg$c66() {
			return 'Eq'
		},
		peg$c67 = '>=',
		peg$c68 = peg$literalExpectation('>=', false),
		peg$c69 = function peg$c69() {
			return 'Gte'
		},
		peg$c70 = '>',
		peg$c71 = peg$literalExpectation('>', false),
		peg$c72 = function peg$c72() {
			return 'Gt'
		},
		peg$c73 = '!=',
		peg$c74 = peg$literalExpectation('!=', false),
		peg$c75 = function peg$c75() {
			return 'Ne'
		},
		peg$c76 = peg$otherExpectation('whitespace'),
		peg$c77 = /^[ \n\t\r]/,
		peg$c78 = peg$classExpectation([' ', '\n', '\t', '\r'], false, false),
		peg$c79 = function peg$c79(count) {
			return {operator: 'Gte', num: count}
		},
		peg$c80 = 'at most',
		peg$c81 = peg$literalExpectation('at most', false),
		peg$c82 = function peg$c82(count) {
			return {operator: 'Lte', num: count}
		},
		peg$c83 = 'exactly',
		peg$c84 = peg$literalExpectation('exactly', false),
		peg$c85 = function peg$c85(count) {
			return {operator: 'Eq', num: count}
		},
		peg$c86 = '0',
		peg$c87 = peg$literalExpectation('0', false),
		peg$c88 = 'zero',
		peg$c89 = peg$literalExpectation('zero', false),
		peg$c90 = '1.5',
		peg$c91 = peg$literalExpectation('1.5', false),
		peg$c92 = 'one-point-five',
		peg$c93 = peg$literalExpectation('one-point-five', false),
		peg$c94 = '1',
		peg$c95 = peg$literalExpectation('1', false),
		peg$c96 = 'one',
		peg$c97 = peg$literalExpectation('one', false),
		peg$c98 = '2',
		peg$c99 = peg$literalExpectation('2', false),
		peg$c100 = 'two',
		peg$c101 = peg$literalExpectation('two', false),
		peg$c102 = '3',
		peg$c103 = peg$literalExpectation('3', false),
		peg$c104 = 'three',
		peg$c105 = peg$literalExpectation('three', false),
		peg$c106 = '4',
		peg$c107 = peg$literalExpectation('4', false),
		peg$c108 = 'four',
		peg$c109 = peg$literalExpectation('four', false),
		peg$c110 = '5',
		peg$c111 = peg$literalExpectation('5', false),
		peg$c112 = 'five',
		peg$c113 = peg$literalExpectation('five', false),
		peg$c114 = '6',
		peg$c115 = peg$literalExpectation('6', false),
		peg$c116 = 'six',
		peg$c117 = peg$literalExpectation('six', false),
		peg$c118 = '7',
		peg$c119 = peg$literalExpectation('7', false),
		peg$c120 = 'seven',
		peg$c121 = peg$literalExpectation('seven', false),
		peg$c122 = '8',
		peg$c123 = peg$literalExpectation('8', false),
		peg$c124 = 'eight',
		peg$c125 = peg$literalExpectation('eight', false),
		peg$c126 = '9',
		peg$c127 = peg$literalExpectation('9', false),
		peg$c128 = 'nine',
		peg$c129 = peg$literalExpectation('nine', false),
		peg$c130 = '10',
		peg$c131 = peg$literalExpectation('10', false),
		peg$c132 = 'ten',
		peg$c133 = peg$literalExpectation('ten', false),
		peg$c134 = function peg$c134(num) {
			if (num === 'zero') {
				return 0
			} else if (num === 'one') {
				return 1
			} else if (num === 'one-point-five') {
				return 1.5
			} else if (num === 'two') {
				return 2
			} else if (num === 'three') {
				return 3
			} else if (num === 'four') {
				return 4
			} else if (num === 'five') {
				return 5
			} else if (num === 'six') {
				return 6
			} else if (num === 'seven') {
				return 7
			} else if (num === 'eight') {
				return 8
			} else if (num === 'nine') {
				return 9
			} else if (num === 'ten') {
				return 10
			} else throw new Error(`invalid number "${num}"`)
		},
		peg$c135 = '!',
		peg$c136 = peg$literalExpectation('!', false),
		peg$c137 = function peg$c137(value) {
			return {type: 'BooleanNot', not: value}
		},
		peg$c138 = ',',
		peg$c139 = peg$literalExpectation(',', false),
		peg$c140 = function peg$c140(val, second) {
			return second
		},
		peg$c141 = function peg$c141(val, rest) {
			return [val].concat(rest)
		},
		peg$c142 = function peg$c142(ofItems) {
			return flatten(ofItems)
		},
		peg$c143 = 'all',
		peg$c144 = peg$literalExpectation('all', false),
		peg$c145 = function peg$c145() {
			return {operator: 'Eq', was: 'All'}
		},
		peg$c146 = 'any',
		peg$c147 = peg$literalExpectation('any', false),
		peg$c148 = function peg$c148() {
			return {operator: 'Gte', num: 1, was: 'Any'}
		},
		peg$c149 = 'none',
		peg$c150 = peg$literalExpectation('none', false),
		peg$c151 = function peg$c151() {
			return {operator: 'Eq', num: 0, was: 'None'}
		},
		peg$c152 = function peg$c152(count, ofList) {
			if (count.was === 'all') {
				count.num = ofList.length
			}
			if (ofList.length < count.num) {
				throw new Error(
					`you requested ${count.num} items, but only gave ${
						ofList.length
					} options (${JSON.stringify(ofList)}).`,
				)
			}
			return {type: 'Of', count: count, of: ofList}
		},
		peg$c153 = function peg$c153(val, rest) {
			return [val, ...rest]
		},
		peg$c154 = function peg$c154(reqs) {
			return flatten(reqs)
		},
		peg$c155 = 'credit',
		peg$c156 = peg$literalExpectation('credit', false),
		peg$c157 = 'term',
		peg$c158 = peg$literalExpectation('term', false),
		peg$c159 = 'children',
		peg$c160 = peg$literalExpectation('children', false),
		peg$c161 = function peg$c161(count, what, besides, where) {
			return {
				from: 'ChildrenWhere',
				qualification: where,
				children: '$all',
			}
		},
		peg$c162 = function peg$c162(count, what, besides) {
			return {from: 'Children', children: '$all'}
		},
		peg$c163 = 'filter',
		peg$c164 = peg$literalExpectation('filter', false),
		peg$c165 = function peg$c165(count, what, besides, where) {
			return {from: 'FilterWhere', qualification: where}
		},
		peg$c166 = function peg$c166(count, what, besides) {
			return {from: 'Filter'}
		},
		peg$c167 = function peg$c167(count, what, besides, where) {
			return {from: 'Where', qualification: where}
		},
		peg$c168 = function peg$c168(count, what, besides, c, w) {
			return {from: 'ChildrenWhere', qualification: w, children: c}
		},
		peg$c169 = function peg$c169(count, what, besides, children) {
			return {from: 'Children', children: children}
		},
		peg$c170 = function peg$c170(count, what, besides, child) {
			return {from: 'Children', children: [child]}
		},
		peg$c171 = function peg$c171(count, what, besides, from) {
			if (from.from === 'where' && what === 'department') {
				throw new Error(
					'cannot use a modifier with "departments" or "department"',
				)
			}
			if (from.from === 'where' && what === 'term') {
				throw new Error('cannot use a modifier with "terms" or "term"')
			}
			if (from.from === 'children-where' && what !== 'course') {
				throw new Error('must use "courses from" with "children where"')
			}
			if (count.operator !== 'Gte' && what !== 'course') {
				throw new Error(
					'can only use at-least style counters with non-course requests',
				)
			}
			what = what[0].toUpperCase() + what.slice(1)
			let result = _objectSpread({}, from, {
				type: 'Modifier',
				count: count,
				what: what,
			})
			if (besides) {
				result.besides = besides
			}
			return result
		},
		peg$c172 = 'besides',
		peg$c173 = peg$literalExpectation('besides', false),
		peg$c174 = function peg$c174(course) {
			return course
		},
		peg$c175 = /^[A-Z0-9]/,
		peg$c176 = peg$classExpectation([['A', 'Z'], ['0', '9']], false, false),
		peg$c177 = /^[A-Za-z0-9_\- \/'.]/,
		peg$c178 = peg$classExpectation(
			[['A', 'Z'], ['a', 'z'], ['0', '9'], '_', '-', ' ', '/', "'", '.'],
			false,
			false,
		),
		peg$c179 = function peg$c179(initial, rest) {
			return initial + rest.join('')
		},
		peg$c180 = function peg$c180(title) {
			return title.trim()
		},
		peg$c181 = peg$otherExpectation('requirement reference'),
		peg$c182 = function peg$c182(a, t) {
			return ` (${t})`
		},
		peg$c183 = function peg$c183(a, b) {
			return `${a}${b || ''}`
		},
		peg$c184 = function peg$c184(title) {
			if (options.abbreviations && title in options.abbreviations) {
				title = options.abbreviations[title]
			} else if (options.titles && title in options.titles) {
				title = options.titles[title]
			}
			return {type: 'Reference', requirement: title}
		},
		peg$c185 = '.',
		peg$c186 = peg$literalExpectation('.', false),
		peg$c187 = function peg$c187(dept, num, year, semester) {
			return {semester}
		},
		peg$c188 = function peg$c188(dept, num, year, sub) {
			return assign({}, sub, {year})
		},
		peg$c189 = function peg$c189(dept, num, details) {
			return _objectSpread(
				{type: 'Course'},
				details,
				dept || fetchDept(),
				num,
			)
		},
		peg$c190 = /^[A-Z\/]/,
		peg$c191 = peg$classExpectation([['A', 'Z'], '/'], false, false),
		peg$c192 = function peg$c192(dept) {
			let department = {department: dept.join('').split('/')}
			storeDept(department)
			return department
		},
		peg$c193 = peg$otherExpectation('course number'),
		peg$c194 = 'I',
		peg$c195 = peg$literalExpectation('I', false),
		peg$c196 = 'L',
		peg$c197 = peg$literalExpectation('L', false),
		peg$c198 = function peg$c198(nums, international, lab) {
			let result = {}
			let number = parseInt(nums.join(''))
			if (international) {
				result.international = true
			}
			if (lab) {
				result.type = 'Lab'
			}
			return assign({}, result, {number})
		},
		peg$c199 = function peg$c199(nums) {
			return parseInt(nums.join(''))
		},
		peg$c200 = function peg$c200() {
			throw new SyntaxError(
				'A course year must be either a four-digit year [e.g. 1994] or an asterisk [*].',
			)
		},
		peg$c201 = /^[1-5]/,
		peg$c202 = peg$classExpectation([['1', '5']], false, false),
		peg$c203 = function peg$c203(num) {
			return parseInt(num)
		},
		peg$c204 = function peg$c204() {
			throw new SyntaxError(
				'A course semester must be either a number between 1 [Fall] and 5 [Summer Session 2], or an asterisk [*].',
			)
		},
		peg$c205 = peg$anyExpectation(),
		peg$c206 = /^[A-Z]/,
		peg$c207 = peg$classExpectation([['A', 'Z']], false, false),
		peg$c208 = function peg$c208(char) {
			return char
		},
		peg$c209 = '*',
		peg$c210 = peg$literalExpectation('*', false),
		peg$c211 = /^[a-z]/i,
		peg$c212 = peg$classExpectation([['a', 'z']], false, true),
		peg$c213 = function peg$c213(chars) {
			return chars.join('')
		},
		peg$c214 = function peg$c214(digits) {
			return parseInt(digits.join(''))
		},
		peg$c215 = /^[0-9]/,
		peg$c216 = peg$classExpectation([['0', '9']], false, false),
		peg$c217 = '(',
		peg$c218 = peg$literalExpectation('(', false),
		peg$c219 = ')',
		peg$c220 = peg$literalExpectation(')', false),
		peg$c221 = 'distinct',
		peg$c222 = peg$literalExpectation('distinct', false),
		peg$c223 = function peg$c223(d) {
			return Boolean(d)
		},
		peg$currPos = 0,
		peg$savedPos = 0,
		peg$posDetailsCache = [{line: 1, column: 1}],
		peg$maxFailPos = 0,
		peg$maxFailExpected = [],
		peg$silentFails = 0,
		peg$result
	if ('startRule' in options) {
		if (!(options.startRule in peg$startRuleFunctions)) {
			throw new Error(
				'Can\'t start parsing from rule "' + options.startRule + '".',
			)
		}
		peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
	}
	function text() {
		return input.substring(peg$savedPos, peg$currPos)
	}
	function location() {
		return peg$computeLocation(peg$savedPos, peg$currPos)
	}
	function expected(description, location) {
		location =
			location !== void 0
				? location
				: peg$computeLocation(peg$savedPos, peg$currPos)
		throw peg$buildStructuredError(
			[peg$otherExpectation(description)],
			input.substring(peg$savedPos, peg$currPos),
			location,
		)
	}
	function error(message, location) {
		location =
			location !== void 0
				? location
				: peg$computeLocation(peg$savedPos, peg$currPos)
		throw peg$buildSimpleError(message, location)
	}
	function peg$literalExpectation(text, ignoreCase) {
		return {type: 'literal', text: text, ignoreCase: ignoreCase}
	}
	function peg$classExpectation(parts, inverted, ignoreCase) {
		return {
			type: 'class',
			parts: parts,
			inverted: inverted,
			ignoreCase: ignoreCase,
		}
	}
	function peg$anyExpectation() {
		return {type: 'any'}
	}
	function peg$endExpectation() {
		return {type: 'end'}
	}
	function peg$otherExpectation(description) {
		return {type: 'other', description: description}
	}
	function peg$computePosDetails(pos) {
		var details = peg$posDetailsCache[pos],
			p
		if (details) {
			return details
		} else {
			p = pos - 1
			while (!peg$posDetailsCache[p]) {
				p--
			}
			details = peg$posDetailsCache[p]
			details = {line: details.line, column: details.column}
			while (p < pos) {
				if (input.charCodeAt(p) === 10) {
					details.line++
					details.column = 1
				} else {
					details.column++
				}
				p++
			}
			peg$posDetailsCache[pos] = details
			return details
		}
	}
	function peg$computeLocation(startPos, endPos) {
		var startPosDetails = peg$computePosDetails(startPos),
			endPosDetails = peg$computePosDetails(endPos)
		return {
			start: {
				offset: startPos,
				line: startPosDetails.line,
				column: startPosDetails.column,
			},
			end: {
				offset: endPos,
				line: endPosDetails.line,
				column: endPosDetails.column,
			},
		}
	}
	function peg$fail(expected) {
		if (peg$currPos < peg$maxFailPos) {
			return
		}
		if (peg$currPos > peg$maxFailPos) {
			peg$maxFailPos = peg$currPos
			peg$maxFailExpected = []
		}
		peg$maxFailExpected.push(expected)
	}
	function peg$buildSimpleError(message, location) {
		return new peg$SyntaxError(message, null, null, location)
	}
	function peg$buildStructuredError(expected, found, location) {
		return new peg$SyntaxError(
			peg$SyntaxError.buildMessage(expected, found),
			expected,
			found,
			location,
		)
	}
	function peg$parseResult() {
		var s0
		s0 = peg$parseOr()
		return s0
	}
	function peg$parseExpression() {
		var s0, s1, s2, s3
		peg$silentFails++
		s0 = peg$currPos
		s1 = peg$parse_()
		if (s1 !== peg$FAILED) {
			s2 = peg$parseNot()
			if (s2 === peg$FAILED) {
				s2 = peg$parseParenthetical()
				if (s2 === peg$FAILED) {
					s2 = peg$parseCourse()
					if (s2 === peg$FAILED) {
						s2 = peg$parseWhere()
						if (s2 === peg$FAILED) {
							s2 = peg$parseOccurrence()
							if (s2 === peg$FAILED) {
								s2 = peg$parseOf()
								if (s2 === peg$FAILED) {
									s2 = peg$parseModifier()
									if (s2 === peg$FAILED) {
										s2 = peg$parseReference()
									}
								}
							}
						}
					}
				}
			}
			if (s2 !== peg$FAILED) {
				s3 = peg$parse_()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c1(s2)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c0)
			}
		}
		return s0
	}
	function peg$parseOptionalS() {
		var s0
		if (input.charCodeAt(peg$currPos) === 115) {
			s0 = peg$c2
			peg$currPos++
		} else {
			s0 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c3)
			}
		}
		if (s0 === peg$FAILED) {
			s0 = null
		}
		return s0
	}
	function peg$parseWhere() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10
		s0 = peg$currPos
		s1 = peg$parseCounter()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseIsDistinct()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.substr(peg$currPos, 6) === peg$c4) {
							s5 = peg$c4
							peg$currPos += 6
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c5)
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parseOptionalS()
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_()
								if (s7 !== peg$FAILED) {
									if (
										input.substr(peg$currPos, 5) === peg$c6
									) {
										s8 = peg$c6
										peg$currPos += 5
									} else {
										s8 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c7)
										}
									}
									if (s8 !== peg$FAILED) {
										s9 = peg$parse_()
										if (s9 !== peg$FAILED) {
											s10 = peg$parseQualifier()
											if (s10 !== peg$FAILED) {
												peg$savedPos = s0
												s1 = peg$c8(s1, s3, s10)
												s0 = s1
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
										} else {
											peg$currPos = s0
											s0 = peg$FAILED
										}
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseFilter() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10
		s0 = peg$currPos
		if (input.substr(peg$currPos, 4) === peg$c9) {
			s1 = peg$c9
			peg$currPos += 4
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c10)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseIsDistinct()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.substr(peg$currPos, 7) === peg$c11) {
							s5 = peg$c11
							peg$currPos += 7
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c12)
							}
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_()
							if (s6 !== peg$FAILED) {
								s7 = peg$currPos
								if (input.substr(peg$currPos, 5) === peg$c6) {
									s8 = peg$c6
									peg$currPos += 5
								} else {
									s8 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c7)
									}
								}
								if (s8 !== peg$FAILED) {
									s9 = peg$parse_()
									if (s9 !== peg$FAILED) {
										s10 = peg$parseQualifier()
										if (s10 !== peg$FAILED) {
											peg$savedPos = s7
											s8 = peg$c13(s3, s10)
											s7 = s8
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
								if (s7 === peg$FAILED) {
									s7 = peg$currPos
									if (
										input.substr(peg$currPos, 4) === peg$c14
									) {
										s8 = peg$c14
										peg$currPos += 4
									} else {
										s8 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c15)
										}
									}
									if (s8 !== peg$FAILED) {
										s9 = peg$parse_()
										if (s9 !== peg$FAILED) {
											s10 = peg$parseOfCourseList()
											if (s10 !== peg$FAILED) {
												peg$savedPos = s7
												s8 = peg$c16(s3, s10)
												s7 = s8
											} else {
												peg$currPos = s7
												s7 = peg$FAILED
											}
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								}
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c17(s3, s7)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOccurrence() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8
		s0 = peg$currPos
		s1 = peg$parseCounter()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.substr(peg$currPos, 10) === peg$c18) {
					s3 = peg$c18
					peg$currPos += 10
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c19)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parseOptionalS()
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_()
						if (s5 !== peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c20) {
								s6 = peg$c20
								peg$currPos += 2
							} else {
								s6 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c21)
								}
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_()
								if (s7 !== peg$FAILED) {
									s8 = peg$parseCourse()
									if (s8 !== peg$FAILED) {
										peg$savedPos = s0
										s1 = peg$c22(s1, s8)
										s0 = s1
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseQualifier() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 123) {
			s1 = peg$c23
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c24)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOrQualification()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 125) {
							s5 = peg$c25
							peg$currPos++
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c26)
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c27(s3)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOrQualification() {
		var s0, s1, s2, s3, s4, s5
		peg$silentFails++
		s0 = peg$currPos
		s1 = peg$parseAndQualification()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 124) {
					s3 = peg$c29
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c30)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseOrQualification()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c31(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseAndQualification()
		}
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c28)
			}
		}
		return s0
	}
	function peg$parseAndQualification() {
		var s0, s1, s2, s3, s4, s5
		peg$silentFails++
		s0 = peg$currPos
		s1 = peg$parseParentheticalQualification()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 38) {
					s3 = peg$c33
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c34)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseAndQualification()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c35(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseParentheticalQualification()
		}
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c32)
			}
		}
		return s0
	}
	function peg$parseParentheticalQualification() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOrQualification()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseCloseParen()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c27(s3)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseQualification()
		}
		return s0
	}
	function peg$parseQualification() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14
		s0 = peg$currPos
		s1 = peg$parseQualificationField()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOperator()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$currPos
						s6 = peg$parseFunction()
						if (s6 !== peg$FAILED) {
							s7 = peg$parse_()
							if (s7 !== peg$FAILED) {
								if (input.substr(peg$currPos, 4) === peg$c14) {
									s8 = peg$c14
									peg$currPos += 4
								} else {
									s8 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c15)
									}
								}
								if (s8 !== peg$FAILED) {
									s9 = peg$parse_()
									if (s9 !== peg$FAILED) {
										if (
											input.substr(peg$currPos, 7) ===
											peg$c11
										) {
											s10 = peg$c11
											peg$currPos += 7
										} else {
											s10 = peg$FAILED
											if (peg$silentFails === 0) {
												peg$fail(peg$c12)
											}
										}
										if (s10 !== peg$FAILED) {
											s11 = peg$parse_()
											if (s11 !== peg$FAILED) {
												if (
													input.substr(
														peg$currPos,
														5,
													) === peg$c6
												) {
													s12 = peg$c6
													peg$currPos += 5
												} else {
													s12 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c7)
													}
												}
												if (s12 !== peg$FAILED) {
													s13 = peg$parse_()
													if (s13 !== peg$FAILED) {
														s14 = peg$parseQualifier()
														if (
															s14 !== peg$FAILED
														) {
															peg$savedPos = s5
															s6 = peg$c36(
																s1,
																s3,
																s6,
																s14,
															)
															s5 = s6
														} else {
															peg$currPos = s5
															s5 = peg$FAILED
														}
													} else {
														peg$currPos = s5
														s5 = peg$FAILED
													}
												} else {
													peg$currPos = s5
													s5 = peg$FAILED
												}
											} else {
												peg$currPos = s5
												s5 = peg$FAILED
											}
										} else {
											peg$currPos = s5
											s5 = peg$FAILED
										}
									} else {
										peg$currPos = s5
										s5 = peg$FAILED
									}
								} else {
									peg$currPos = s5
									s5 = peg$FAILED
								}
							} else {
								peg$currPos = s5
								s5 = peg$FAILED
							}
						} else {
							peg$currPos = s5
							s5 = peg$FAILED
						}
						if (s5 === peg$FAILED) {
							s5 = peg$parseQualificationValue()
							if (s5 === peg$FAILED) {
								s5 = peg$parseParentheticalQualificationValue()
							}
						}
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c37(s1, s3, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseParentheticalQualificationValue() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOrQualificationValue()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseCloseParen()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c38(s3)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOrQualificationValue() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseAndQualificationValue()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 124) {
					s3 = peg$c29
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c30)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseOrQualificationValue()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c31(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseAndQualificationValue()
		}
		return s0
	}
	function peg$parseAndQualificationValue() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseQualificationValue()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 38) {
					s3 = peg$c33
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c34)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseAndQualificationValue()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c35(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseQualificationValue()
		}
		return s0
	}
	function peg$parseQualificationValue() {
		var s0, s1, s2
		s0 = peg$currPos
		s1 = peg$parseInteger()
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c39(s1)
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			s1 = []
			if (peg$c40.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos)
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c41)
				}
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2)
					if (peg$c40.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos)
						peg$currPos++
					} else {
						s2 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c41)
						}
					}
				}
			} else {
				s1 = peg$FAILED
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c42(s1)
			}
			s0 = s1
		}
		return s0
	}
	function peg$parseQualificationField() {
		var s0
		if (input.substr(peg$currPos, 6) === peg$c43) {
			s0 = peg$c43
			peg$currPos += 6
		} else {
			s0 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c44)
			}
		}
		if (s0 === peg$FAILED) {
			if (input.substr(peg$currPos, 4) === peg$c45) {
				s0 = peg$c45
				peg$currPos += 4
			} else {
				s0 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c46)
				}
			}
			if (s0 === peg$FAILED) {
				if (input.substr(peg$currPos, 10) === peg$c47) {
					s0 = peg$c47
					peg$currPos += 10
				} else {
					s0 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c48)
					}
				}
				if (s0 === peg$FAILED) {
					if (input.substr(peg$currPos, 5) === peg$c49) {
						s0 = peg$c49
						peg$currPos += 5
					} else {
						s0 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c50)
						}
					}
				}
			}
		}
		return s0
	}
	function peg$parseFunction() {
		var s0, s1, s2, s3, s4, s5, s6, s7
		s0 = peg$currPos
		if (input.substr(peg$currPos, 3) === peg$c51) {
			s1 = peg$c51
			peg$currPos += 3
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c52)
			}
		}
		if (s1 === peg$FAILED) {
			if (input.substr(peg$currPos, 3) === peg$c53) {
				s1 = peg$c53
				peg$currPos += 3
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c54)
				}
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOpenParen()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseQualificationField()
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_()
							if (s6 !== peg$FAILED) {
								s7 = peg$parseCloseParen()
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c55(s1, s5)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOperator() {
		var s0, s1
		s0 = peg$currPos
		if (input.substr(peg$currPos, 2) === peg$c56) {
			s1 = peg$c56
			peg$currPos += 2
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c57)
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c58()
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			if (input.charCodeAt(peg$currPos) === 60) {
				s1 = peg$c59
				peg$currPos++
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c60)
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0
				s1 = peg$c61()
			}
			s0 = s1
			if (s0 === peg$FAILED) {
				s0 = peg$currPos
				if (input.substr(peg$currPos, 2) === peg$c62) {
					s1 = peg$c62
					peg$currPos += 2
				} else {
					s1 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c63)
					}
				}
				if (s1 === peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 61) {
						s1 = peg$c64
						peg$currPos++
					} else {
						s1 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c65)
						}
					}
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c66()
				}
				s0 = s1
				if (s0 === peg$FAILED) {
					s0 = peg$currPos
					if (input.substr(peg$currPos, 2) === peg$c67) {
						s1 = peg$c67
						peg$currPos += 2
					} else {
						s1 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c68)
						}
					}
					if (s1 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c69()
					}
					s0 = s1
					if (s0 === peg$FAILED) {
						s0 = peg$currPos
						if (input.charCodeAt(peg$currPos) === 62) {
							s1 = peg$c70
							peg$currPos++
						} else {
							s1 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c71)
							}
						}
						if (s1 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c72()
						}
						s0 = s1
						if (s0 === peg$FAILED) {
							s0 = peg$currPos
							if (input.substr(peg$currPos, 2) === peg$c73) {
								s1 = peg$c73
								peg$currPos += 2
							} else {
								s1 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c74)
								}
							}
							if (s1 !== peg$FAILED) {
								peg$savedPos = s0
								s1 = peg$c75()
							}
							s0 = s1
						}
					}
				}
			}
		}
		return s0
	}
	function peg$parse_() {
		var s0, s1
		peg$silentFails++
		s0 = []
		if (peg$c77.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c78)
			}
		}
		while (s1 !== peg$FAILED) {
			s0.push(s1)
			if (peg$c77.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos)
				peg$currPos++
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c78)
				}
			}
		}
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c76)
			}
		}
		return s0
	}
	function peg$parseCounter() {
		var s0, s1, s2, s3
		s0 = peg$currPos
		s1 = peg$parseEnglishInteger()
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c79(s1)
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$currPos
			if (input.substr(peg$currPos, 7) === peg$c80) {
				s1 = peg$c80
				peg$currPos += 7
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c81)
				}
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parse_()
				if (s2 !== peg$FAILED) {
					s3 = peg$parseEnglishInteger()
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c82(s3)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
			if (s0 === peg$FAILED) {
				s0 = peg$currPos
				if (input.substr(peg$currPos, 7) === peg$c83) {
					s1 = peg$c83
					peg$currPos += 7
				} else {
					s1 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c84)
					}
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parse_()
					if (s2 !== peg$FAILED) {
						s3 = peg$parseEnglishInteger()
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c85(s3)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			}
		}
		return s0
	}
	function peg$parseEnglishInteger() {
		var s0, s1
		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 48) {
			s1 = peg$c86
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c87)
			}
		}
		if (s1 === peg$FAILED) {
			if (input.substr(peg$currPos, 4) === peg$c88) {
				s1 = peg$c88
				peg$currPos += 4
			} else {
				s1 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c89)
				}
			}
			if (s1 === peg$FAILED) {
				if (input.substr(peg$currPos, 3) === peg$c90) {
					s1 = peg$c90
					peg$currPos += 3
				} else {
					s1 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c91)
					}
				}
				if (s1 === peg$FAILED) {
					if (input.substr(peg$currPos, 14) === peg$c92) {
						s1 = peg$c92
						peg$currPos += 14
					} else {
						s1 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c93)
						}
					}
					if (s1 === peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 49) {
							s1 = peg$c94
							peg$currPos++
						} else {
							s1 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c95)
							}
						}
						if (s1 === peg$FAILED) {
							if (input.substr(peg$currPos, 3) === peg$c96) {
								s1 = peg$c96
								peg$currPos += 3
							} else {
								s1 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c97)
								}
							}
							if (s1 === peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 50) {
									s1 = peg$c98
									peg$currPos++
								} else {
									s1 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c99)
									}
								}
								if (s1 === peg$FAILED) {
									if (
										input.substr(peg$currPos, 3) ===
										peg$c100
									) {
										s1 = peg$c100
										peg$currPos += 3
									} else {
										s1 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c101)
										}
									}
									if (s1 === peg$FAILED) {
										if (
											input.charCodeAt(peg$currPos) === 51
										) {
											s1 = peg$c102
											peg$currPos++
										} else {
											s1 = peg$FAILED
											if (peg$silentFails === 0) {
												peg$fail(peg$c103)
											}
										}
										if (s1 === peg$FAILED) {
											if (
												input.substr(peg$currPos, 5) ===
												peg$c104
											) {
												s1 = peg$c104
												peg$currPos += 5
											} else {
												s1 = peg$FAILED
												if (peg$silentFails === 0) {
													peg$fail(peg$c105)
												}
											}
											if (s1 === peg$FAILED) {
												if (
													input.charCodeAt(
														peg$currPos,
													) === 52
												) {
													s1 = peg$c106
													peg$currPos++
												} else {
													s1 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c107)
													}
												}
												if (s1 === peg$FAILED) {
													if (
														input.substr(
															peg$currPos,
															4,
														) === peg$c108
													) {
														s1 = peg$c108
														peg$currPos += 4
													} else {
														s1 = peg$FAILED
														if (
															peg$silentFails ===
															0
														) {
															peg$fail(peg$c109)
														}
													}
													if (s1 === peg$FAILED) {
														if (
															input.charCodeAt(
																peg$currPos,
															) === 53
														) {
															s1 = peg$c110
															peg$currPos++
														} else {
															s1 = peg$FAILED
															if (
																peg$silentFails ===
																0
															) {
																peg$fail(
																	peg$c111,
																)
															}
														}
														if (s1 === peg$FAILED) {
															if (
																input.substr(
																	peg$currPos,
																	4,
																) === peg$c112
															) {
																s1 = peg$c112
																peg$currPos += 4
															} else {
																s1 = peg$FAILED
																if (
																	peg$silentFails ===
																	0
																) {
																	peg$fail(
																		peg$c113,
																	)
																}
															}
															if (
																s1 ===
																peg$FAILED
															) {
																if (
																	input.charCodeAt(
																		peg$currPos,
																	) === 54
																) {
																	s1 = peg$c114
																	peg$currPos++
																} else {
																	s1 = peg$FAILED
																	if (
																		peg$silentFails ===
																		0
																	) {
																		peg$fail(
																			peg$c115,
																		)
																	}
																}
																if (
																	s1 ===
																	peg$FAILED
																) {
																	if (
																		input.substr(
																			peg$currPos,
																			3,
																		) ===
																		peg$c116
																	) {
																		s1 = peg$c116
																		peg$currPos += 3
																	} else {
																		s1 = peg$FAILED
																		if (
																			peg$silentFails ===
																			0
																		) {
																			peg$fail(
																				peg$c117,
																			)
																		}
																	}
																	if (
																		s1 ===
																		peg$FAILED
																	) {
																		if (
																			input.charCodeAt(
																				peg$currPos,
																			) ===
																			55
																		) {
																			s1 = peg$c118
																			peg$currPos++
																		} else {
																			s1 = peg$FAILED
																			if (
																				peg$silentFails ===
																				0
																			) {
																				peg$fail(
																					peg$c119,
																				)
																			}
																		}
																		if (
																			s1 ===
																			peg$FAILED
																		) {
																			if (
																				input.substr(
																					peg$currPos,
																					5,
																				) ===
																				peg$c120
																			) {
																				s1 = peg$c120
																				peg$currPos += 5
																			} else {
																				s1 = peg$FAILED
																				if (
																					peg$silentFails ===
																					0
																				) {
																					peg$fail(
																						peg$c121,
																					)
																				}
																			}
																			if (
																				s1 ===
																				peg$FAILED
																			) {
																				if (
																					input.charCodeAt(
																						peg$currPos,
																					) ===
																					56
																				) {
																					s1 = peg$c122
																					peg$currPos++
																				} else {
																					s1 = peg$FAILED
																					if (
																						peg$silentFails ===
																						0
																					) {
																						peg$fail(
																							peg$c123,
																						)
																					}
																				}
																				if (
																					s1 ===
																					peg$FAILED
																				) {
																					if (
																						input.substr(
																							peg$currPos,
																							5,
																						) ===
																						peg$c124
																					) {
																						s1 = peg$c124
																						peg$currPos += 5
																					} else {
																						s1 = peg$FAILED
																						if (
																							peg$silentFails ===
																							0
																						) {
																							peg$fail(
																								peg$c125,
																							)
																						}
																					}
																					if (
																						s1 ===
																						peg$FAILED
																					) {
																						if (
																							input.charCodeAt(
																								peg$currPos,
																							) ===
																							57
																						) {
																							s1 = peg$c126
																							peg$currPos++
																						} else {
																							s1 = peg$FAILED
																							if (
																								peg$silentFails ===
																								0
																							) {
																								peg$fail(
																									peg$c127,
																								)
																							}
																						}
																						if (
																							s1 ===
																							peg$FAILED
																						) {
																							if (
																								input.substr(
																									peg$currPos,
																									4,
																								) ===
																								peg$c128
																							) {
																								s1 = peg$c128
																								peg$currPos += 4
																							} else {
																								s1 = peg$FAILED
																								if (
																									peg$silentFails ===
																									0
																								) {
																									peg$fail(
																										peg$c129,
																									)
																								}
																							}
																							if (
																								s1 ===
																								peg$FAILED
																							) {
																								if (
																									input.substr(
																										peg$currPos,
																										2,
																									) ===
																									peg$c130
																								) {
																									s1 = peg$c130
																									peg$currPos += 2
																								} else {
																									s1 = peg$FAILED
																									if (
																										peg$silentFails ===
																										0
																									) {
																										peg$fail(
																											peg$c131,
																										)
																									}
																								}
																								if (
																									s1 ===
																									peg$FAILED
																								) {
																									if (
																										input.substr(
																											peg$currPos,
																											3,
																										) ===
																										peg$c132
																									) {
																										s1 = peg$c132
																										peg$currPos += 3
																									} else {
																										s1 = peg$FAILED
																										if (
																											peg$silentFails ===
																											0
																										) {
																											peg$fail(
																												peg$c133,
																											)
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c134(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseNot() {
		var s0, s1, s2, s3
		s0 = peg$currPos
		if (input.charCodeAt(peg$currPos) === 33) {
			s1 = peg$c135
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c136)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseExpression()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c137(s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseParenthetical() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseOr()
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseCloseParen()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c38(s3)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOr() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseAnd()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 124) {
					s3 = peg$c29
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c30)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseOr()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c31(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseAnd()
		}
		return s0
	}
	function peg$parseAnd() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseExpression()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 38) {
					s3 = peg$c33
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c34)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseAnd()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c35(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		if (s0 === peg$FAILED) {
			s0 = peg$parseExpression()
		}
		return s0
	}
	function peg$parseOfCourseList() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = []
				s4 = peg$currPos
				s5 = peg$parseCourse()
				if (s5 !== peg$FAILED) {
					s6 = []
					s7 = peg$currPos
					s8 = peg$parse_()
					if (s8 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s9 = peg$c138
							peg$currPos++
						} else {
							s9 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s9 !== peg$FAILED) {
							s10 = peg$parse_()
							if (s10 !== peg$FAILED) {
								s11 = peg$parseCourse()
								if (s11 !== peg$FAILED) {
									peg$savedPos = s7
									s8 = peg$c140(s5, s11)
									s7 = s8
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					} else {
						peg$currPos = s7
						s7 = peg$FAILED
					}
					while (s7 !== peg$FAILED) {
						s6.push(s7)
						s7 = peg$currPos
						s8 = peg$parse_()
						if (s8 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s9 = peg$c138
								peg$currPos++
							} else {
								s9 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c139)
								}
							}
							if (s9 !== peg$FAILED) {
								s10 = peg$parse_()
								if (s10 !== peg$FAILED) {
									s11 = peg$parseCourse()
									if (s11 !== peg$FAILED) {
										peg$savedPos = s7
										s8 = peg$c140(s5, s11)
										s7 = s8
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					}
					if (s6 !== peg$FAILED) {
						peg$savedPos = s4
						s5 = peg$c141(s5, s6)
						s4 = s5
					} else {
						peg$currPos = s4
						s4 = peg$FAILED
					}
				} else {
					peg$currPos = s4
					s4 = peg$FAILED
				}
				if (s4 !== peg$FAILED) {
					while (s4 !== peg$FAILED) {
						s3.push(s4)
						s4 = peg$currPos
						s5 = peg$parseCourse()
						if (s5 !== peg$FAILED) {
							s6 = []
							s7 = peg$currPos
							s8 = peg$parse_()
							if (s8 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 44) {
									s9 = peg$c138
									peg$currPos++
								} else {
									s9 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c139)
									}
								}
								if (s9 !== peg$FAILED) {
									s10 = peg$parse_()
									if (s10 !== peg$FAILED) {
										s11 = peg$parseCourse()
										if (s11 !== peg$FAILED) {
											peg$savedPos = s7
											s8 = peg$c140(s5, s11)
											s7 = s8
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
							while (s7 !== peg$FAILED) {
								s6.push(s7)
								s7 = peg$currPos
								s8 = peg$parse_()
								if (s8 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 44) {
										s9 = peg$c138
										peg$currPos++
									} else {
										s9 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c139)
										}
									}
									if (s9 !== peg$FAILED) {
										s10 = peg$parse_()
										if (s10 !== peg$FAILED) {
											s11 = peg$parseCourse()
											if (s11 !== peg$FAILED) {
												peg$savedPos = s7
												s8 = peg$c140(s5, s11)
												s7 = s8
											} else {
												peg$currPos = s7
												s7 = peg$FAILED
											}
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							}
							if (s6 !== peg$FAILED) {
								peg$savedPos = s4
								s5 = peg$c141(s5, s6)
								s4 = s5
							} else {
								peg$currPos = s4
								s4 = peg$FAILED
							}
						} else {
							peg$currPos = s4
							s4 = peg$FAILED
						}
					}
				} else {
					s3 = peg$FAILED
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c138
							peg$currPos++
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s5 === peg$FAILED) {
							s5 = null
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_()
							if (s6 !== peg$FAILED) {
								s7 = peg$parseCloseParen()
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c142(s3)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOfList() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = []
				s4 = peg$currPos
				s5 = peg$parseOr()
				if (s5 !== peg$FAILED) {
					s6 = []
					s7 = peg$currPos
					s8 = peg$parse_()
					if (s8 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s9 = peg$c138
							peg$currPos++
						} else {
							s9 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s9 !== peg$FAILED) {
							s10 = peg$parse_()
							if (s10 !== peg$FAILED) {
								s11 = peg$parseOr()
								if (s11 !== peg$FAILED) {
									peg$savedPos = s7
									s8 = peg$c140(s5, s11)
									s7 = s8
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					} else {
						peg$currPos = s7
						s7 = peg$FAILED
					}
					while (s7 !== peg$FAILED) {
						s6.push(s7)
						s7 = peg$currPos
						s8 = peg$parse_()
						if (s8 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s9 = peg$c138
								peg$currPos++
							} else {
								s9 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c139)
								}
							}
							if (s9 !== peg$FAILED) {
								s10 = peg$parse_()
								if (s10 !== peg$FAILED) {
									s11 = peg$parseOr()
									if (s11 !== peg$FAILED) {
										peg$savedPos = s7
										s8 = peg$c140(s5, s11)
										s7 = s8
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					}
					if (s6 !== peg$FAILED) {
						peg$savedPos = s4
						s5 = peg$c141(s5, s6)
						s4 = s5
					} else {
						peg$currPos = s4
						s4 = peg$FAILED
					}
				} else {
					peg$currPos = s4
					s4 = peg$FAILED
				}
				if (s4 !== peg$FAILED) {
					while (s4 !== peg$FAILED) {
						s3.push(s4)
						s4 = peg$currPos
						s5 = peg$parseOr()
						if (s5 !== peg$FAILED) {
							s6 = []
							s7 = peg$currPos
							s8 = peg$parse_()
							if (s8 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 44) {
									s9 = peg$c138
									peg$currPos++
								} else {
									s9 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c139)
									}
								}
								if (s9 !== peg$FAILED) {
									s10 = peg$parse_()
									if (s10 !== peg$FAILED) {
										s11 = peg$parseOr()
										if (s11 !== peg$FAILED) {
											peg$savedPos = s7
											s8 = peg$c140(s5, s11)
											s7 = s8
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
							while (s7 !== peg$FAILED) {
								s6.push(s7)
								s7 = peg$currPos
								s8 = peg$parse_()
								if (s8 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 44) {
										s9 = peg$c138
										peg$currPos++
									} else {
										s9 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c139)
										}
									}
									if (s9 !== peg$FAILED) {
										s10 = peg$parse_()
										if (s10 !== peg$FAILED) {
											s11 = peg$parseOr()
											if (s11 !== peg$FAILED) {
												peg$savedPos = s7
												s8 = peg$c140(s5, s11)
												s7 = s8
											} else {
												peg$currPos = s7
												s7 = peg$FAILED
											}
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							}
							if (s6 !== peg$FAILED) {
								peg$savedPos = s4
								s5 = peg$c141(s5, s6)
								s4 = s5
							} else {
								peg$currPos = s4
								s4 = peg$FAILED
							}
						} else {
							peg$currPos = s4
							s4 = peg$FAILED
						}
					}
				} else {
					s3 = peg$FAILED
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c138
							peg$currPos++
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s5 === peg$FAILED) {
							s5 = null
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_()
							if (s6 !== peg$FAILED) {
								s7 = peg$parseCloseParen()
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c142(s3)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseOf() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$parseCounter()
		if (s1 === peg$FAILED) {
			s1 = peg$currPos
			if (input.substr(peg$currPos, 3) === peg$c143) {
				s2 = peg$c143
				peg$currPos += 3
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c144)
				}
			}
			if (s2 !== peg$FAILED) {
				peg$savedPos = s1
				s2 = peg$c145()
			}
			s1 = s2
			if (s1 === peg$FAILED) {
				s1 = peg$currPos
				if (input.substr(peg$currPos, 3) === peg$c146) {
					s2 = peg$c146
					peg$currPos += 3
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c147)
					}
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s1
					s2 = peg$c148()
				}
				s1 = s2
				if (s1 === peg$FAILED) {
					s1 = peg$currPos
					if (input.substr(peg$currPos, 4) === peg$c149) {
						s2 = peg$c149
						peg$currPos += 4
					} else {
						s2 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c150)
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s1
						s2 = peg$c151()
					}
					s1 = s2
				}
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.substr(peg$currPos, 2) === peg$c20) {
					s3 = peg$c20
					peg$currPos += 2
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c21)
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						s5 = peg$parseOfList()
						if (s5 !== peg$FAILED) {
							peg$savedPos = s0
							s1 = peg$c152(s1, s5)
							s0 = s1
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseChildList() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11
		s0 = peg$currPos
		s1 = peg$parseOpenParen()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = []
				s4 = peg$currPos
				s5 = peg$parseReference()
				if (s5 !== peg$FAILED) {
					s6 = []
					s7 = peg$currPos
					s8 = peg$parse_()
					if (s8 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s9 = peg$c138
							peg$currPos++
						} else {
							s9 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s9 !== peg$FAILED) {
							s10 = peg$parse_()
							if (s10 !== peg$FAILED) {
								s11 = peg$parseReference()
								if (s11 !== peg$FAILED) {
									peg$savedPos = s7
									s8 = peg$c140(s5, s11)
									s7 = s8
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					} else {
						peg$currPos = s7
						s7 = peg$FAILED
					}
					while (s7 !== peg$FAILED) {
						s6.push(s7)
						s7 = peg$currPos
						s8 = peg$parse_()
						if (s8 !== peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 44) {
								s9 = peg$c138
								peg$currPos++
							} else {
								s9 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c139)
								}
							}
							if (s9 !== peg$FAILED) {
								s10 = peg$parse_()
								if (s10 !== peg$FAILED) {
									s11 = peg$parseReference()
									if (s11 !== peg$FAILED) {
										peg$savedPos = s7
										s8 = peg$c140(s5, s11)
										s7 = s8
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
						} else {
							peg$currPos = s7
							s7 = peg$FAILED
						}
					}
					if (s6 !== peg$FAILED) {
						peg$savedPos = s4
						s5 = peg$c153(s5, s6)
						s4 = s5
					} else {
						peg$currPos = s4
						s4 = peg$FAILED
					}
				} else {
					peg$currPos = s4
					s4 = peg$FAILED
				}
				if (s4 !== peg$FAILED) {
					while (s4 !== peg$FAILED) {
						s3.push(s4)
						s4 = peg$currPos
						s5 = peg$parseReference()
						if (s5 !== peg$FAILED) {
							s6 = []
							s7 = peg$currPos
							s8 = peg$parse_()
							if (s8 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 44) {
									s9 = peg$c138
									peg$currPos++
								} else {
									s9 = peg$FAILED
									if (peg$silentFails === 0) {
										peg$fail(peg$c139)
									}
								}
								if (s9 !== peg$FAILED) {
									s10 = peg$parse_()
									if (s10 !== peg$FAILED) {
										s11 = peg$parseReference()
										if (s11 !== peg$FAILED) {
											peg$savedPos = s7
											s8 = peg$c140(s5, s11)
											s7 = s8
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
							while (s7 !== peg$FAILED) {
								s6.push(s7)
								s7 = peg$currPos
								s8 = peg$parse_()
								if (s8 !== peg$FAILED) {
									if (input.charCodeAt(peg$currPos) === 44) {
										s9 = peg$c138
										peg$currPos++
									} else {
										s9 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c139)
										}
									}
									if (s9 !== peg$FAILED) {
										s10 = peg$parse_()
										if (s10 !== peg$FAILED) {
											s11 = peg$parseReference()
											if (s11 !== peg$FAILED) {
												peg$savedPos = s7
												s8 = peg$c140(s5, s11)
												s7 = s8
											} else {
												peg$currPos = s7
												s7 = peg$FAILED
											}
										} else {
											peg$currPos = s7
											s7 = peg$FAILED
										}
									} else {
										peg$currPos = s7
										s7 = peg$FAILED
									}
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							}
							if (s6 !== peg$FAILED) {
								peg$savedPos = s4
								s5 = peg$c153(s5, s6)
								s4 = s5
							} else {
								peg$currPos = s4
								s4 = peg$FAILED
							}
						} else {
							peg$currPos = s4
							s4 = peg$FAILED
						}
					}
				} else {
					s3 = peg$FAILED
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parse_()
					if (s4 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 44) {
							s5 = peg$c138
							peg$currPos++
						} else {
							s5 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c139)
							}
						}
						if (s5 === peg$FAILED) {
							s5 = null
						}
						if (s5 !== peg$FAILED) {
							s6 = peg$parse_()
							if (s6 !== peg$FAILED) {
								s7 = peg$parseCloseParen()
								if (s7 !== peg$FAILED) {
									peg$savedPos = s0
									s1 = peg$c154(s3)
									s0 = s1
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseModifier() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15
		s0 = peg$currPos
		s1 = peg$parseCounter()
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				if (input.substr(peg$currPos, 6) === peg$c4) {
					s3 = peg$c4
					peg$currPos += 6
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c5)
					}
				}
				if (s3 === peg$FAILED) {
					if (input.substr(peg$currPos, 6) === peg$c155) {
						s3 = peg$c155
						peg$currPos += 6
					} else {
						s3 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c156)
						}
					}
					if (s3 === peg$FAILED) {
						if (input.substr(peg$currPos, 10) === peg$c47) {
							s3 = peg$c47
							peg$currPos += 10
						} else {
							s3 = peg$FAILED
							if (peg$silentFails === 0) {
								peg$fail(peg$c48)
							}
						}
						if (s3 === peg$FAILED) {
							if (input.substr(peg$currPos, 4) === peg$c157) {
								s3 = peg$c157
								peg$currPos += 4
							} else {
								s3 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c158)
								}
							}
						}
					}
				}
				if (s3 !== peg$FAILED) {
					s4 = peg$parseOptionalS()
					if (s4 !== peg$FAILED) {
						s5 = peg$parse_()
						if (s5 !== peg$FAILED) {
							s6 = peg$parseBesides()
							if (s6 === peg$FAILED) {
								s6 = null
							}
							if (s6 !== peg$FAILED) {
								s7 = peg$parse_()
								if (s7 !== peg$FAILED) {
									if (
										input.substr(peg$currPos, 4) === peg$c14
									) {
										s8 = peg$c14
										peg$currPos += 4
									} else {
										s8 = peg$FAILED
										if (peg$silentFails === 0) {
											peg$fail(peg$c15)
										}
									}
									if (s8 !== peg$FAILED) {
										s9 = peg$parse_()
										if (s9 !== peg$FAILED) {
											s10 = peg$currPos
											if (
												input.substr(peg$currPos, 8) ===
												peg$c159
											) {
												s11 = peg$c159
												peg$currPos += 8
											} else {
												s11 = peg$FAILED
												if (peg$silentFails === 0) {
													peg$fail(peg$c160)
												}
											}
											if (s11 !== peg$FAILED) {
												s12 = peg$parse_()
												if (s12 !== peg$FAILED) {
													if (
														input.substr(
															peg$currPos,
															5,
														) === peg$c6
													) {
														s13 = peg$c6
														peg$currPos += 5
													} else {
														s13 = peg$FAILED
														if (
															peg$silentFails ===
															0
														) {
															peg$fail(peg$c7)
														}
													}
													if (s13 !== peg$FAILED) {
														s14 = peg$parse_()
														if (
															s14 !== peg$FAILED
														) {
															s15 = peg$parseQualifier()
															if (
																s15 !==
																peg$FAILED
															) {
																peg$savedPos = s10
																s11 = peg$c161(
																	s1,
																	s3,
																	s6,
																	s15,
																)
																s10 = s11
															} else {
																peg$currPos = s10
																s10 = peg$FAILED
															}
														} else {
															peg$currPos = s10
															s10 = peg$FAILED
														}
													} else {
														peg$currPos = s10
														s10 = peg$FAILED
													}
												} else {
													peg$currPos = s10
													s10 = peg$FAILED
												}
											} else {
												peg$currPos = s10
												s10 = peg$FAILED
											}
											if (s10 === peg$FAILED) {
												s10 = peg$currPos
												if (
													input.substr(
														peg$currPos,
														8,
													) === peg$c159
												) {
													s11 = peg$c159
													peg$currPos += 8
												} else {
													s11 = peg$FAILED
													if (peg$silentFails === 0) {
														peg$fail(peg$c160)
													}
												}
												if (s11 !== peg$FAILED) {
													peg$savedPos = s10
													s11 = peg$c162(s1, s3, s6)
												}
												s10 = s11
												if (s10 === peg$FAILED) {
													s10 = peg$currPos
													if (
														input.substr(
															peg$currPos,
															6,
														) === peg$c163
													) {
														s11 = peg$c163
														peg$currPos += 6
													} else {
														s11 = peg$FAILED
														if (
															peg$silentFails ===
															0
														) {
															peg$fail(peg$c164)
														}
													}
													if (s11 !== peg$FAILED) {
														s12 = peg$parse_()
														if (
															s12 !== peg$FAILED
														) {
															if (
																input.substr(
																	peg$currPos,
																	5,
																) === peg$c6
															) {
																s13 = peg$c6
																peg$currPos += 5
															} else {
																s13 = peg$FAILED
																if (
																	peg$silentFails ===
																	0
																) {
																	peg$fail(
																		peg$c7,
																	)
																}
															}
															if (
																s13 !==
																peg$FAILED
															) {
																s14 = peg$parse_()
																if (
																	s14 !==
																	peg$FAILED
																) {
																	s15 = peg$parseQualifier()
																	if (
																		s15 !==
																		peg$FAILED
																	) {
																		peg$savedPos = s10
																		s11 = peg$c165(
																			s1,
																			s3,
																			s6,
																			s15,
																		)
																		s10 = s11
																	} else {
																		peg$currPos = s10
																		s10 = peg$FAILED
																	}
																} else {
																	peg$currPos = s10
																	s10 = peg$FAILED
																}
															} else {
																peg$currPos = s10
																s10 = peg$FAILED
															}
														} else {
															peg$currPos = s10
															s10 = peg$FAILED
														}
													} else {
														peg$currPos = s10
														s10 = peg$FAILED
													}
													if (s10 === peg$FAILED) {
														s10 = peg$currPos
														if (
															input.substr(
																peg$currPos,
																6,
															) === peg$c163
														) {
															s11 = peg$c163
															peg$currPos += 6
														} else {
															s11 = peg$FAILED
															if (
																peg$silentFails ===
																0
															) {
																peg$fail(
																	peg$c164,
																)
															}
														}
														if (
															s11 !== peg$FAILED
														) {
															peg$savedPos = s10
															s11 = peg$c166(
																s1,
																s3,
																s6,
															)
														}
														s10 = s11
														if (
															s10 === peg$FAILED
														) {
															s10 = peg$currPos
															if (
																input.substr(
																	peg$currPos,
																	7,
																) === peg$c11
															) {
																s11 = peg$c11
																peg$currPos += 7
															} else {
																s11 = peg$FAILED
																if (
																	peg$silentFails ===
																	0
																) {
																	peg$fail(
																		peg$c12,
																	)
																}
															}
															if (
																s11 !==
																peg$FAILED
															) {
																s12 = peg$parse_()
																if (
																	s12 !==
																	peg$FAILED
																) {
																	if (
																		input.substr(
																			peg$currPos,
																			5,
																		) ===
																		peg$c6
																	) {
																		s13 = peg$c6
																		peg$currPos += 5
																	} else {
																		s13 = peg$FAILED
																		if (
																			peg$silentFails ===
																			0
																		) {
																			peg$fail(
																				peg$c7,
																			)
																		}
																	}
																	if (
																		s13 !==
																		peg$FAILED
																	) {
																		s14 = peg$parse_()
																		if (
																			s14 !==
																			peg$FAILED
																		) {
																			s15 = peg$parseQualifier()
																			if (
																				s15 !==
																				peg$FAILED
																			) {
																				peg$savedPos = s10
																				s11 = peg$c167(
																					s1,
																					s3,
																					s6,
																					s15,
																				)
																				s10 = s11
																			} else {
																				peg$currPos = s10
																				s10 = peg$FAILED
																			}
																		} else {
																			peg$currPos = s10
																			s10 = peg$FAILED
																		}
																	} else {
																		peg$currPos = s10
																		s10 = peg$FAILED
																	}
																} else {
																	peg$currPos = s10
																	s10 = peg$FAILED
																}
															} else {
																peg$currPos = s10
																s10 = peg$FAILED
															}
															if (
																s10 ===
																peg$FAILED
															) {
																s10 = peg$currPos
																s11 = peg$parseChildList()
																if (
																	s11 !==
																	peg$FAILED
																) {
																	s12 = peg$parse_()
																	if (
																		s12 !==
																		peg$FAILED
																	) {
																		if (
																			input.substr(
																				peg$currPos,
																				5,
																			) ===
																			peg$c6
																		) {
																			s13 = peg$c6
																			peg$currPos += 5
																		} else {
																			s13 = peg$FAILED
																			if (
																				peg$silentFails ===
																				0
																			) {
																				peg$fail(
																					peg$c7,
																				)
																			}
																		}
																		if (
																			s13 !==
																			peg$FAILED
																		) {
																			s14 = peg$parse_()
																			if (
																				s14 !==
																				peg$FAILED
																			) {
																				s15 = peg$parseQualifier()
																				if (
																					s15 !==
																					peg$FAILED
																				) {
																					peg$savedPos = s10
																					s11 = peg$c168(
																						s1,
																						s3,
																						s6,
																						s11,
																						s15,
																					)
																					s10 = s11
																				} else {
																					peg$currPos = s10
																					s10 = peg$FAILED
																				}
																			} else {
																				peg$currPos = s10
																				s10 = peg$FAILED
																			}
																		} else {
																			peg$currPos = s10
																			s10 = peg$FAILED
																		}
																	} else {
																		peg$currPos = s10
																		s10 = peg$FAILED
																	}
																} else {
																	peg$currPos = s10
																	s10 = peg$FAILED
																}
																if (
																	s10 ===
																	peg$FAILED
																) {
																	s10 = peg$currPos
																	s11 = peg$parseChildList()
																	if (
																		s11 !==
																		peg$FAILED
																	) {
																		peg$savedPos = s10
																		s11 = peg$c169(
																			s1,
																			s3,
																			s6,
																			s11,
																		)
																	}
																	s10 = s11
																	if (
																		s10 ===
																		peg$FAILED
																	) {
																		s10 = peg$currPos
																		s11 = peg$parseReference()
																		if (
																			s11 !==
																			peg$FAILED
																		) {
																			peg$savedPos = s10
																			s11 = peg$c170(
																				s1,
																				s3,
																				s6,
																				s11,
																			)
																		}
																		s10 = s11
																	}
																}
															}
														}
													}
												}
											}
											if (s10 !== peg$FAILED) {
												peg$savedPos = s0
												s1 = peg$c171(s1, s3, s6, s10)
												s0 = s1
											} else {
												peg$currPos = s0
												s0 = peg$FAILED
											}
										} else {
											peg$currPos = s0
											s0 = peg$FAILED
										}
									} else {
										peg$currPos = s0
										s0 = peg$FAILED
									}
								} else {
									peg$currPos = s0
									s0 = peg$FAILED
								}
							} else {
								peg$currPos = s0
								s0 = peg$FAILED
							}
						} else {
							peg$currPos = s0
							s0 = peg$FAILED
						}
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseBesides() {
		var s0, s1, s2, s3
		s0 = peg$currPos
		if (input.substr(peg$currPos, 7) === peg$c172) {
			s1 = peg$c172
			peg$currPos += 7
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c173)
			}
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseCourse()
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c174(s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseRequirementTitle() {
		var s0, s1, s2, s3, s4
		s0 = peg$currPos
		s1 = peg$currPos
		if (peg$c175.test(input.charAt(peg$currPos))) {
			s2 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s2 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c176)
			}
		}
		if (s2 !== peg$FAILED) {
			s3 = []
			if (peg$c177.test(input.charAt(peg$currPos))) {
				s4 = input.charAt(peg$currPos)
				peg$currPos++
			} else {
				s4 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c178)
				}
			}
			while (s4 !== peg$FAILED) {
				s3.push(s4)
				if (peg$c177.test(input.charAt(peg$currPos))) {
					s4 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s4 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c178)
					}
				}
			}
			if (s3 !== peg$FAILED) {
				peg$savedPos = s1
				s2 = peg$c179(s2, s3)
				s1 = s2
			} else {
				peg$currPos = s1
				s1 = peg$FAILED
			}
		} else {
			peg$currPos = s1
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c180(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseReference() {
		var s0, s1, s2, s3, s4, s5, s6, s7
		peg$silentFails++
		s0 = peg$currPos
		s1 = peg$currPos
		s2 = peg$parseRequirementTitle()
		if (s2 !== peg$FAILED) {
			s3 = peg$currPos
			s4 = peg$parse_()
			if (s4 !== peg$FAILED) {
				s5 = peg$parseOpenParen()
				if (s5 !== peg$FAILED) {
					s6 = peg$parseRequirementTitle()
					if (s6 !== peg$FAILED) {
						s7 = peg$parseCloseParen()
						if (s7 !== peg$FAILED) {
							peg$savedPos = s3
							s4 = peg$c182(s2, s6)
							s3 = s4
						} else {
							peg$currPos = s3
							s3 = peg$FAILED
						}
					} else {
						peg$currPos = s3
						s3 = peg$FAILED
					}
				} else {
					peg$currPos = s3
					s3 = peg$FAILED
				}
			} else {
				peg$currPos = s3
				s3 = peg$FAILED
			}
			if (s3 === peg$FAILED) {
				s3 = null
			}
			if (s3 !== peg$FAILED) {
				peg$savedPos = s1
				s2 = peg$c183(s2, s3)
				s1 = s2
			} else {
				peg$currPos = s1
				s1 = peg$FAILED
			}
		} else {
			peg$currPos = s1
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c184(s1)
		}
		s0 = s1
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c181)
			}
		}
		return s0
	}
	function peg$parseCourse() {
		var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9
		s0 = peg$currPos
		s1 = peg$parseCourseDepartment()
		if (s1 === peg$FAILED) {
			s1 = null
		}
		if (s1 !== peg$FAILED) {
			s2 = peg$parse_()
			if (s2 !== peg$FAILED) {
				s3 = peg$parseCourseNumber()
				if (s3 !== peg$FAILED) {
					s4 = peg$currPos
					if (input.charCodeAt(peg$currPos) === 46) {
						s5 = peg$c185
						peg$currPos++
					} else {
						s5 = peg$FAILED
						if (peg$silentFails === 0) {
							peg$fail(peg$c186)
						}
					}
					if (s5 !== peg$FAILED) {
						s6 = peg$parseCourseYear()
						if (s6 !== peg$FAILED) {
							s7 = peg$currPos
							if (input.charCodeAt(peg$currPos) === 46) {
								s8 = peg$c185
								peg$currPos++
							} else {
								s8 = peg$FAILED
								if (peg$silentFails === 0) {
									peg$fail(peg$c186)
								}
							}
							if (s8 !== peg$FAILED) {
								s9 = peg$parseCourseSemester()
								if (s9 !== peg$FAILED) {
									peg$savedPos = s7
									s8 = peg$c187(s1, s3, s6, s9)
									s7 = s8
								} else {
									peg$currPos = s7
									s7 = peg$FAILED
								}
							} else {
								peg$currPos = s7
								s7 = peg$FAILED
							}
							if (s7 === peg$FAILED) {
								s7 = null
							}
							if (s7 !== peg$FAILED) {
								peg$savedPos = s4
								s5 = peg$c188(s1, s3, s6, s7)
								s4 = s5
							} else {
								peg$currPos = s4
								s4 = peg$FAILED
							}
						} else {
							peg$currPos = s4
							s4 = peg$FAILED
						}
					} else {
						peg$currPos = s4
						s4 = peg$FAILED
					}
					if (s4 === peg$FAILED) {
						s4 = null
					}
					if (s4 !== peg$FAILED) {
						peg$savedPos = s0
						s1 = peg$c189(s1, s3, s4)
						s0 = s1
					} else {
						peg$currPos = s0
						s0 = peg$FAILED
					}
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseCourseDepartment() {
		var s0, s1, s2
		s0 = peg$currPos
		s1 = []
		if (peg$c190.test(input.charAt(peg$currPos))) {
			s2 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s2 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c191)
			}
		}
		if (s2 !== peg$FAILED) {
			while (s2 !== peg$FAILED) {
				s1.push(s2)
				if (peg$c190.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c191)
					}
				}
			}
		} else {
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c192(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseCourseNumber() {
		var s0, s1, s2, s3, s4
		peg$silentFails++
		s0 = peg$currPos
		s1 = peg$currPos
		s2 = peg$parseDigit()
		if (s2 !== peg$FAILED) {
			s3 = peg$parseDigit()
			if (s3 !== peg$FAILED) {
				s4 = peg$parseDigit()
				if (s4 !== peg$FAILED) {
					s2 = [s2, s3, s4]
					s1 = s2
				} else {
					peg$currPos = s1
					s1 = peg$FAILED
				}
			} else {
				peg$currPos = s1
				s1 = peg$FAILED
			}
		} else {
			peg$currPos = s1
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			if (input.charCodeAt(peg$currPos) === 73) {
				s2 = peg$c194
				peg$currPos++
			} else {
				s2 = peg$FAILED
				if (peg$silentFails === 0) {
					peg$fail(peg$c195)
				}
			}
			if (s2 === peg$FAILED) {
				s2 = null
			}
			if (s2 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 76) {
					s3 = peg$c196
					peg$currPos++
				} else {
					s3 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c197)
					}
				}
				if (s3 === peg$FAILED) {
					s3 = null
				}
				if (s3 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c198(s1, s2, s3)
					s0 = s1
				} else {
					peg$currPos = s0
					s0 = peg$FAILED
				}
			} else {
				peg$currPos = s0
				s0 = peg$FAILED
			}
		} else {
			peg$currPos = s0
			s0 = peg$FAILED
		}
		peg$silentFails--
		if (s0 === peg$FAILED) {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c193)
			}
		}
		return s0
	}
	function peg$parseCourseYear() {
		var s0, s1, s2, s3, s4, s5
		s0 = peg$currPos
		s1 = peg$currPos
		s2 = peg$parseDigit()
		if (s2 !== peg$FAILED) {
			s3 = peg$parseDigit()
			if (s3 !== peg$FAILED) {
				s4 = peg$parseDigit()
				if (s4 !== peg$FAILED) {
					s5 = peg$parseDigit()
					if (s5 !== peg$FAILED) {
						s2 = [s2, s3, s4, s5]
						s1 = s2
					} else {
						peg$currPos = s1
						s1 = peg$FAILED
					}
				} else {
					peg$currPos = s1
					s1 = peg$FAILED
				}
			} else {
				peg$currPos = s1
				s1 = peg$FAILED
			}
		} else {
			peg$currPos = s1
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c199(s1)
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$parseAsterisk()
			if (s0 === peg$FAILED) {
				s0 = peg$currPos
				s1 = peg$parseElse()
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c200()
				}
				s0 = s1
			}
		}
		return s0
	}
	function peg$parseCourseSemester() {
		var s0, s1
		s0 = peg$currPos
		if (peg$c201.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c202)
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c203(s1)
		}
		s0 = s1
		if (s0 === peg$FAILED) {
			s0 = peg$parseAsterisk()
			if (s0 === peg$FAILED) {
				s0 = peg$currPos
				s1 = peg$parseElse()
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0
					s1 = peg$c204()
				}
				s0 = s1
			}
		}
		return s0
	}
	function peg$parseElse() {
		var s0, s1
		s0 = []
		if (input.length > peg$currPos) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c205)
			}
		}
		if (s1 !== peg$FAILED) {
			while (s1 !== peg$FAILED) {
				s0.push(s1)
				if (input.length > peg$currPos) {
					s1 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s1 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c205)
					}
				}
			}
		} else {
			s0 = peg$FAILED
		}
		return s0
	}
	function peg$parseUppercaseLetter() {
		var s0, s1
		s0 = peg$currPos
		if (peg$c206.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c207)
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c208(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseAsterisk() {
		var s0
		if (input.charCodeAt(peg$currPos) === 42) {
			s0 = peg$c209
			peg$currPos++
		} else {
			s0 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c210)
			}
		}
		return s0
	}
	function peg$parseWord() {
		var s0, s1, s2
		s0 = peg$currPos
		s1 = []
		if (peg$c211.test(input.charAt(peg$currPos))) {
			s2 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s2 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c212)
			}
		}
		if (s2 !== peg$FAILED) {
			while (s2 !== peg$FAILED) {
				s1.push(s2)
				if (peg$c211.test(input.charAt(peg$currPos))) {
					s2 = input.charAt(peg$currPos)
					peg$currPos++
				} else {
					s2 = peg$FAILED
					if (peg$silentFails === 0) {
						peg$fail(peg$c212)
					}
				}
			}
		} else {
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c213(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseInteger() {
		var s0, s1, s2
		s0 = peg$currPos
		s1 = []
		s2 = peg$parseDigit()
		if (s2 !== peg$FAILED) {
			while (s2 !== peg$FAILED) {
				s1.push(s2)
				s2 = peg$parseDigit()
			}
		} else {
			s1 = peg$FAILED
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c214(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseDigit() {
		var s0, s1
		s0 = peg$currPos
		if (peg$c215.test(input.charAt(peg$currPos))) {
			s1 = input.charAt(peg$currPos)
			peg$currPos++
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c216)
			}
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c203(s1)
		}
		s0 = s1
		return s0
	}
	function peg$parseOpenParen() {
		var s0
		if (input.charCodeAt(peg$currPos) === 40) {
			s0 = peg$c217
			peg$currPos++
		} else {
			s0 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c218)
			}
		}
		return s0
	}
	function peg$parseCloseParen() {
		var s0
		if (input.charCodeAt(peg$currPos) === 41) {
			s0 = peg$c219
			peg$currPos++
		} else {
			s0 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c220)
			}
		}
		return s0
	}
	function peg$parseIsDistinct() {
		var s0, s1
		s0 = peg$currPos
		if (input.substr(peg$currPos, 8) === peg$c221) {
			s1 = peg$c221
			peg$currPos += 8
		} else {
			s1 = peg$FAILED
			if (peg$silentFails === 0) {
				peg$fail(peg$c222)
			}
		}
		if (s1 === peg$FAILED) {
			s1 = null
		}
		if (s1 !== peg$FAILED) {
			peg$savedPos = s0
			s1 = peg$c223(s1)
		}
		s0 = s1
		return s0
	}
	var globalLastDept
	function storeDept(dept) {
		globalLastDept = dept
	}
	function fetchDept(dept) {
		return globalLastDept
	}
	var flatten = require('lodash/flatten')
	var assign = require('lodash/assign')
	peg$result = peg$startRuleFunction()
	if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		return peg$result
	} else {
		if (peg$result !== peg$FAILED && peg$currPos < input.length) {
			peg$fail(peg$endExpectation())
		}
		throw peg$buildStructuredError(
			peg$maxFailExpected,
			peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
			peg$maxFailPos < input.length
				? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
				: peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
		)
	}
}
module.exports = {SyntaxError: peg$SyntaxError, parse: peg$parse}
